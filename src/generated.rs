use std::path::Path;
#[rustfmt::skip]
#[allow(
    warnings,
    clippy::ifs_same_cond,
    reason = "this function is generated by a script"
)]
pub(super) fn comment<S: ToString, P: AsRef<Path>>(content: S, path: P) -> String {
    let path: &Path = path.as_ref();
    let extension = path.extension();
    let (start_token, end_token) = if extension.is_some_and(|ext| ext == "adb") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "ads") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "adl") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "agda") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "alloy") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ab") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "astro") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "awk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gawk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nawk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mawk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "sh") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bash") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ash") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "dash") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ksh") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mksh") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zsh") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zshenv") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zlogin") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zlogout") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zprofile") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zshrc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "eclass") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ebuild") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bazelrc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "Renviron") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zsh-theme") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "cshrc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "tcshrc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bashrc_Apple_Terminal") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "zshrc_Apple_Terminal") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bass") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "beancount") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "bean") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "bib") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "bicep") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "bicepparam") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "bb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bbappend") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bbclass") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "blp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "c") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cs") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "csx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cake") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cabal") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "cairo") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "capnp") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "cel") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "circom") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "clar") {
        (";;", "")
    } else if extension.is_some_and(|ext| ext == "clj") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cljs") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cljc") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "clje") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cljr") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cljx") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "edn") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "boot") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cmake") {
        ("#[[", "]]")
    } else if extension.is_some_and(|ext| ext == "ql") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "qll") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "lisp") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "asd") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cl") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "l") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "lsp") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "ny") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "podsl") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "sexp") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "cpon") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "cp") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "cc") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "hh") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "c++") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cpp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "hpp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "h") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ipp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tpp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cxx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "hxx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ixx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "txx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ino") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "C") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "H") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cu") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cuh") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cppm") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "h++") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ii") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "inl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cr") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "css") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cue") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "cylc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "d") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dd") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dart") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dbml") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "dsc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "changes") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "dts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dtsi") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dhall") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "diff") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "patch") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rej") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "dj") {
        ("{%", "%}")
    } else if extension.is_some_and(|ext| ext == "djot") {
        ("{%", "%}")
    } else if extension.is_some_and(|ext| ext == "Dockerfile") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "dockerfile") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "Containerfile") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "containerfile") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "dot") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "eex") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "ejs") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "el") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "ex") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "exs") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "elm") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "elv") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "erb") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "erl") {
        ("%%", "")
    } else if extension.is_some_and(|ext| ext == "hrl") {
        ("%%", "")
    } else if extension.is_some_and(|ext| ext == "app") {
        ("%%", "")
    } else if extension.is_some_and(|ext| ext == "esdl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "fnl") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "fnlm") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "fga") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "fidl") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "fish") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "fs") {
        ("\\", "")
    } else if extension.is_some_and(|ext| ext == "forth") {
        ("\\", "")
    } else if extension.is_some_and(|ext| ext == "fth") {
        ("\\", "")
    } else if extension.is_some_and(|ext| ext == "4th") {
        ("\\", "")
    } else if extension.is_some_and(|ext| ext == "f") {
        ("!", "")
    } else if extension.is_some_and(|ext| ext == "for") {
        ("!", "")
    } else if extension.is_some_and(|ext| ext == "f90") {
        ("!", "")
    } else if extension.is_some_and(|ext| ext == "f95") {
        ("!", "")
    } else if extension.is_some_and(|ext| ext == "f03") {
        ("!", "")
    } else if extension.is_some_and(|ext| ext == "fs") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "fsx") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "fsi") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "fsscript") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "s") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gd") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "feature") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gitconfig") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gjs") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "gleam") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "glsl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vert") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tesc") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tese") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "geom") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "frag") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "comp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "gn") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gni") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "go") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tscn") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "tres") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "godot") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "gdextension") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "gotmpl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "gpr") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "gql") {
        ("\"\"\"", "\"\"\"")
    } else if extension.is_some_and(|ext| ext == "graphql") {
        ("\"\"\"", "\"\"\"")
    } else if extension.is_some_and(|ext| ext == "graphqls") {
        ("\"\"\"", "\"\"\"")
    } else if extension.is_some_and(|ext| ext == "gren") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "gradle") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "groovy") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "jenkinsfile") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "gts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ha") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "hs") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "hs-boot") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "hsc") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "persistentmodels") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "hcl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tf") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "nomad") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "heex") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "hoon") {
        ("::", "")
    } else if extension.is_some_and(|ext| ext == "html") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "htm") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "shtml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xhtml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xht") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "jsp") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "asp") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "aspx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "jshtm") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "volt") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "rhtml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "cshtml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "hurl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "idr") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "iex") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ini") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "service") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "automount") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "desktop") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "device") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mount") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nspawn") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "path") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "scope") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "slice") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "socket") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "swap") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "target") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "timer") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "container") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "volume") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "kube") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "network") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "properties") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "cfg") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "directory") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ink") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "inko") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "cgen") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "janet") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "jdn") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "java") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "jav") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "pde") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "js") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "mjs") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cjs") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "rules") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "es6") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "pac") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "jinja") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "jinja2") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "j2") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "jq") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "json5") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "jsonc") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "libsonnet") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "jsonnet") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "jsx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "jl") {
        ("#=", "=#")
    } else if extension.is_some_and(|ext| ext == "just") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "kdl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "kk") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "kt") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "kts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "koto") {
        ("#-", "-#")
    } else if extension.is_some_and(|ext| ext == "tex") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "sty") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "cls") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "Rd") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "bbx") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "cbx") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "ld") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ldif") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "lean") {
        ("/-", "-/")
    } else if extension.is_some_and(|ext| ext == "ldg") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "ledger") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "journal") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "ll") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "mir") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "lpf") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "lua") {
        ("--[[", "--]]")
    } else if extension.is_some_and(|ext| ext == "rockspec") {
        ("--[[", "--]]")
    } else if extension.is_some_and(|ext| ext == "luau") {
        ("--[[", "]]")
    } else if extension.is_some_and(|ext| ext == "make") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mak") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "mdoc") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "md") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "livemd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "markdown") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mdx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mkd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mkdn") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mdwn") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mdown") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "markdn") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mdtxt") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mdtext") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "workbook") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "m") {
        ("%", "")
    } else if extension.is_some_and(|ext| ext == "mermaid") {
        ("%%", "")
    } else if extension.is_some_and(|ext| ext == "mmd") {
        ("%%", "")
    } else if extension.is_some_and(|ext| ext == "mint") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "mojo") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "🔥") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "move") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "proj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "vbproj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "csproj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "fsproj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "targets") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "props") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "asm") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "S") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "nasm") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "nt") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ncl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nim") {
        ("#[", "]#")
    } else if extension.is_some_and(|ext| ext == "nims") {
        ("#[", "]#")
    } else if extension.is_some_and(|ext| ext == "nimble") {
        ("#[", "]#")
    } else if extension.is_some_and(|ext| ext == "nix") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nu") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nuon") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "njk") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "ml") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "mli") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "odin") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ohm") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cl") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "scad") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "pas") {
        ("{", "}")
    } else if extension.is_some_and(|ext| ext == "pp") {
        ("{", "}")
    } else if extension.is_some_and(|ext| ext == "inc") {
        ("{", "}")
    } else if extension.is_some_and(|ext| ext == "lpr") {
        ("{", "}")
    } else if extension.is_some_and(|ext| ext == "lfm") {
        ("{", "}")
    } else if extension.is_some_and(|ext| ext == "pl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pm") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "t") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "psgi") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "raku") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rakumod") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rakutest") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rakudoc") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "nqp") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "p6") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pl6") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pm6") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pest") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "php") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "inc") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "php4") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "php5") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "phtml") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "ctp") {
        ("/**", "*/")
    } else if extension.is_some_and(|ext| ext == "pkl") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "pcf") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "po") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pot") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pony") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ps1") {
        ("<#", "#>")
    } else if extension.is_some_and(|ext| ext == "psm1") {
        ("<#", "#>")
    } else if extension.is_some_and(|ext| ext == "psd1") {
        ("<#", "#>")
    } else if extension.is_some_and(|ext| ext == "pscc") {
        ("<#", "#>")
    } else if extension.is_some_and(|ext| ext == "psrc") {
        ("<#", "#>")
    } else if extension.is_some_and(|ext| ext == "prisma") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "pl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "prolog") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "properties") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "prefs") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "proto") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "prql") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pug") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "purs") {
        ("{-", "-}")
    } else if extension.is_some_and(|ext| ext == "py") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pyi") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "py3") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pyw") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ptl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rpy") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "cpy") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ipy") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "pyt") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "qml") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "qmd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "qnt") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "r") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "R") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rkt") {
        ("#|", "|#")
    } else if extension.is_some_and(|ext| ext == "rktd") {
        ("#|", "|#")
    } else if extension.is_some_and(|ext| ext == "rktl") {
        ("#|", "|#")
    } else if extension.is_some_and(|ext| ext == "scrbl") {
        ("#|", "|#")
    } else if extension.is_some_and(|ext| ext == "rego") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "res") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "rmd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "Rmd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "robot") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "resource") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "ron") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "rst") {
        ("..", "")
    } else if extension.is_some_and(|ext| ext == "rb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rake") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "irb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "gemspec") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rabl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "jbuilder") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "jb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "podspec") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rjs") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rbi") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rbs") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "rs") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sage") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "scala") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sbt") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sc") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ss") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "scm") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "sld") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "scss") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "slang") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "slint") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "smali") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "smithy") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "sml") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "smk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "sol") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sp") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "inc") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "spade") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "zed") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "sql") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "dsql") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "bzl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "bazel") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "star") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "scd") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "sc") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "quark") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "svelte") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sw") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "swift") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "swiftinterface") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cmm") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "t32") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "td") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tact") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "task") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "tcl") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "tl") {
        ("--[[", "--]]")
    } else if extension.is_some_and(|ext| ext == "templ") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "tera") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "txtpb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "textpb") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "textproto") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "tfvars") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "thrift") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tla") {
        ("(*", "*)")
    } else if extension.is_some_and(|ext| ext == "toml") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "tsx") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "twig") {
        ("{#", "#}")
    } else if extension.is_some_and(|ext| ext == "ts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "mts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "cts") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "tsp") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "typst") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "typ") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "ungram") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "ungrammar") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "u") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "tal") {
        ("(", ")")
    } else if extension.is_some_and(|ext| ext == "v") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vv") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vsh") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vala") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vapi") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vto") {
        ("{{#", "#}}")
    } else if extension.is_some_and(|ext| ext == "v") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vh") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "sv") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "svh") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "vhd") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "vhdl") {
        ("--", "")
    } else if extension.is_some_and(|ext| ext == "tape") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "vue") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "wast") {
        ("(;", ";)")
    } else if extension.is_some_and(|ext| ext == "wat") {
        ("(;", ";)")
    } else if extension.is_some_and(|ext| ext == "webc") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "werk") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "wesl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "wgsl") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "wit") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "xml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mobileconfig") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "plist") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xib") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "storyboard") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "svg") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xsd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "gml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xaml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "gir") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "rss") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "atom") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "opml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "policy") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "ascx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "axml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "axaml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "bpmn") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "cpt") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "csl") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "csproj.user") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "dita") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "ditamap") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "dtml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "fxml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "iml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "isml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "jmx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "launch") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "menu") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mxml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "nuspec") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "osc") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "osm") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "pt") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "publishsettings") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "pubxml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "pubxml.user") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "rbxlx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "rbxmx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "rng") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "shproj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "tld") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "tmx") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "vbproj.user") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "vcxproj") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "vcxproj.filters") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "wsdl") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "wxi") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "wxs") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xbl") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xlf") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xliff") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xpdl") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xul") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xoml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "musicxml") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "glif") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "ui") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "sublime-snippet") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xsl") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "mpd") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "smil") {
        ("<!--", "-->")
    } else if extension.is_some_and(|ext| ext == "xtc") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "xpc") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "xoa") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "yml") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "yaml") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "sublime-syntax") {
        ("#", "")
    } else if extension.is_some_and(|ext| ext == "yara") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "yar") {
        ("/*", "*/")
    } else if extension.is_some_and(|ext| ext == "yuck") {
        (";", "")
    } else if extension.is_some_and(|ext| ext == "zig") {
        ("//", "")
    } else if extension.is_some_and(|ext| ext == "zon") {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/i3/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sway/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/tmux.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_login")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_logout")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bashrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zshenv")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zlogin")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zlogout")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zshrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zimrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/APKBUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_aliases")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Renviron")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xsession")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xsessionrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.yashrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.yash_profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.hushlogin")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf/*/*.{inc,conf}")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/recipe-*/*/*.inc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Caddyfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/CMakeLists.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#[[", "]]")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.hpp.in")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.h.in")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/suite.rc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/debian/**/control")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/etc/apt/sources.list.d/*.sources")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/docker-compose.yaml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/docker-compose.yml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Dockerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Dockerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dockerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dockerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Containerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Containerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/containerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/containerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dune-project")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dune")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dunst/dunstrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Earthfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/mix.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.env")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.env.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.envrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.envrc.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rebar.config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rebar.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.app.src")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/ghostty/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitattributes")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/git/attributes")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/COMMIT_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/MERGE_MSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitmodules")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitconfig")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.git/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/git/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitignore_global")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/git/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/CODEOWNERS")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/helix/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.helix/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.*ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.git-blame-ignore-revs")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/NOTES_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/git-rebase-todo")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/{app,addon}/{components,templates}/*.hbs")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("{{!", "}}")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/go.mod")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/go.work")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Jenkinsfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Jenkinsfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/*.yaml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/*.yml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/_*.tpl")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/NOTES.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/**/src/*/resources/**/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*scalafmt*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*scalafix*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hosts")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hypr/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/mimeapps.list")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/systemd/**/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.editorconfig")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.npmrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hgrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/npmrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rclone.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.node_repl_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/jakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.jjdescription")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("JJ:", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/{t,j}sconfig.json")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/bun.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Makefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/makefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/GNUmakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/OCamlMakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/PULLREQ_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("<!--", "-->")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson.build")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson.options")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson_options.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sites-available/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sites-enabled/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/nginx.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf.d/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/PKGBUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.python_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.pythonstartup")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.pythonrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*SConstruct")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*SConscript")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*sconstruct")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Rprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rprofile.site")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.RHistory")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/gemfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Gemfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Podfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Vagrantfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Brewfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Guardfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Capfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Cheffile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Hobofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Appraisals")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rantfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Berksfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Berksfile.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Thorfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Puppetfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Fastfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Appfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Deliverfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Matchfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Scanfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Snapfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Gymfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Snakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.ssh/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("/etc/ssh/ssh_config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/ssh_config.d/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUCK")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUILD.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Tiltfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/WORKSPACE")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/WORKSPACE.bzlmod")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/pdm.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/poetry.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Cargo.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/uv.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/queries/*.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/injections.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/highlights.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/indents.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/textobjects.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/locals.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/tags.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Werkfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.tm[Tt]heme")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("<!--", "-->")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.prettierrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clangd")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clang-format")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clang-tidy")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gem/credentials")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else {
        ("#", "")
    };
    let content = content.to_string();
    let mut buf = String::with_capacity(
        start_token.len() + content.len() + end_token.len() + 2,
    );
    buf.push_str(start_token);
    if !start_token.is_empty() {
        buf.push(' ');
    }
    buf.push_str(&content);
    if !end_token.is_empty() {
        buf.push(' ');
    }
    buf.push_str(end_token);
    buf
}
