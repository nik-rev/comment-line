use std::path::Path;
#[rustfmt::skip]
#[allow(
    warnings,
    clippy::ifs_same_cond,
    reason = "this function is generated by a script"
)]
pub(super) fn comment_line<S: ToString, P: AsRef<Path>>(content: S, path: P) -> String {
    let path: &Path = path.as_ref();
    let (start_token, end_token) = if path.ends_with("adb") {
        ("--", "")
    } else if path.ends_with("ads") {
        ("--", "")
    } else if path.ends_with("adl") {
        ("//", "")
    } else if path.ends_with("agda") {
        ("--", "")
    } else if path.ends_with("alloy") {
        ("/*", "*/")
    } else if path.ends_with("ab") {
        ("//", "")
    } else if path.ends_with("astro") {
        ("<!--", "-->")
    } else if path.ends_with("awk") {
        ("#", "")
    } else if path.ends_with("gawk") {
        ("#", "")
    } else if path.ends_with("nawk") {
        ("#", "")
    } else if path.ends_with("mawk") {
        ("#", "")
    } else if path.ends_with("sh") {
        ("#", "")
    } else if path.ends_with("bash") {
        ("#", "")
    } else if path.ends_with("ash") {
        ("#", "")
    } else if path.ends_with("dash") {
        ("#", "")
    } else if path.ends_with("ksh") {
        ("#", "")
    } else if path.ends_with("mksh") {
        ("#", "")
    } else if path.ends_with("zsh") {
        ("#", "")
    } else if path.ends_with("zshenv") {
        ("#", "")
    } else if path.ends_with("zlogin") {
        ("#", "")
    } else if path.ends_with("zlogout") {
        ("#", "")
    } else if path.ends_with("zprofile") {
        ("#", "")
    } else if path.ends_with("zshrc") {
        ("#", "")
    } else if path.ends_with("eclass") {
        ("#", "")
    } else if path.ends_with("ebuild") {
        ("#", "")
    } else if path.ends_with("bazelrc") {
        ("#", "")
    } else if path.ends_with("Renviron") {
        ("#", "")
    } else if path.ends_with("zsh-theme") {
        ("#", "")
    } else if path.ends_with("cshrc") {
        ("#", "")
    } else if path.ends_with("tcshrc") {
        ("#", "")
    } else if path.ends_with("bashrc_Apple_Terminal") {
        ("#", "")
    } else if path.ends_with("zshrc_Apple_Terminal") {
        ("#", "")
    } else if path.ends_with("bass") {
        (";", "")
    } else if path.ends_with("beancount") {
        (";", "")
    } else if path.ends_with("bean") {
        (";", "")
    } else if path.ends_with("bib") {
        ("%", "")
    } else if path.ends_with("bicep") {
        ("/*", "*/")
    } else if path.ends_with("bicepparam") {
        ("/*", "*/")
    } else if path.ends_with("bb") {
        ("#", "")
    } else if path.ends_with("bbappend") {
        ("#", "")
    } else if path.ends_with("bbclass") {
        ("#", "")
    } else if path.ends_with("blp") {
        ("/*", "*/")
    } else if path.ends_with("c") {
        ("/*", "*/")
    } else if path.ends_with("cs") {
        ("/*", "*/")
    } else if path.ends_with("csx") {
        ("/*", "*/")
    } else if path.ends_with("cake") {
        ("/*", "*/")
    } else if path.ends_with("cabal") {
        ("--", "")
    } else if path.ends_with("cairo") {
        ("//", "")
    } else if path.ends_with("capnp") {
        ("#", "")
    } else if path.ends_with("cel") {
        ("//", "")
    } else if path.ends_with("circom") {
        ("//", "")
    } else if path.ends_with("clar") {
        (";;", "")
    } else if path.ends_with("clj") {
        (";", "")
    } else if path.ends_with("cljs") {
        (";", "")
    } else if path.ends_with("cljc") {
        (";", "")
    } else if path.ends_with("clje") {
        (";", "")
    } else if path.ends_with("cljr") {
        (";", "")
    } else if path.ends_with("cljx") {
        (";", "")
    } else if path.ends_with("edn") {
        (";", "")
    } else if path.ends_with("boot") {
        (";", "")
    } else if path.ends_with("cmake") {
        ("#[[", "]]")
    } else if path.ends_with("ql") {
        ("/*", "*/")
    } else if path.ends_with("qll") {
        ("/*", "*/")
    } else if path.ends_with("lisp") {
        (";", "")
    } else if path.ends_with("asd") {
        (";", "")
    } else if path.ends_with("cl") {
        (";", "")
    } else if path.ends_with("l") {
        (";", "")
    } else if path.ends_with("lsp") {
        (";", "")
    } else if path.ends_with("ny") {
        (";", "")
    } else if path.ends_with("podsl") {
        (";", "")
    } else if path.ends_with("sexp") {
        (";", "")
    } else if path.ends_with("cpon") {
        ("//", "")
    } else if path.ends_with("cp") {
        ("//", "")
    } else if path.ends_with("cc") {
        ("/*", "*/")
    } else if path.ends_with("hh") {
        ("/*", "*/")
    } else if path.ends_with("c++") {
        ("/*", "*/")
    } else if path.ends_with("cpp") {
        ("/*", "*/")
    } else if path.ends_with("hpp") {
        ("/*", "*/")
    } else if path.ends_with("h") {
        ("/*", "*/")
    } else if path.ends_with("ipp") {
        ("/*", "*/")
    } else if path.ends_with("tpp") {
        ("/*", "*/")
    } else if path.ends_with("cxx") {
        ("/*", "*/")
    } else if path.ends_with("hxx") {
        ("/*", "*/")
    } else if path.ends_with("ixx") {
        ("/*", "*/")
    } else if path.ends_with("txx") {
        ("/*", "*/")
    } else if path.ends_with("ino") {
        ("/*", "*/")
    } else if path.ends_with("C") {
        ("/*", "*/")
    } else if path.ends_with("H") {
        ("/*", "*/")
    } else if path.ends_with("cu") {
        ("/*", "*/")
    } else if path.ends_with("cuh") {
        ("/*", "*/")
    } else if path.ends_with("cppm") {
        ("/*", "*/")
    } else if path.ends_with("h++") {
        ("/*", "*/")
    } else if path.ends_with("ii") {
        ("/*", "*/")
    } else if path.ends_with("inl") {
        ("/*", "*/")
    } else if path.ends_with("cr") {
        ("#", "")
    } else if path.ends_with("css") {
        ("/*", "*/")
    } else if path.ends_with("cue") {
        ("//", "")
    } else if path.ends_with("cylc") {
        ("#", "")
    } else if path.ends_with("d") {
        ("/*", "*/")
    } else if path.ends_with("dd") {
        ("/*", "*/")
    } else if path.ends_with("dart") {
        ("/*", "*/")
    } else if path.ends_with("dbml") {
        (";", "")
    } else if path.ends_with("dsc") {
        ("#", "")
    } else if path.ends_with("changes") {
        ("#", "")
    } else if path.ends_with("dts") {
        ("/*", "*/")
    } else if path.ends_with("dtsi") {
        ("/*", "*/")
    } else if path.ends_with("dhall") {
        ("{-", "-}")
    } else if path.ends_with("diff") {
        ("#", "")
    } else if path.ends_with("patch") {
        ("#", "")
    } else if path.ends_with("rej") {
        ("#", "")
    } else if path.ends_with("dj") {
        ("{%", "%}")
    } else if path.ends_with("djot") {
        ("{%", "%}")
    } else if path.ends_with("Dockerfile") {
        ("#", "")
    } else if path.ends_with("dockerfile") {
        ("#", "")
    } else if path.ends_with("Containerfile") {
        ("#", "")
    } else if path.ends_with("containerfile") {
        ("#", "")
    } else if path.ends_with("dot") {
        ("/*", "*/")
    } else if path.ends_with("eex") {
        ("<!--", "-->")
    } else if path.ends_with("ejs") {
        ("<!--", "-->")
    } else if path.ends_with("el") {
        (";", "")
    } else if path.ends_with("ex") {
        ("#", "")
    } else if path.ends_with("exs") {
        ("#", "")
    } else if path.ends_with("elm") {
        ("{-", "-}")
    } else if path.ends_with("elv") {
        ("#", "")
    } else if path.ends_with("erb") {
        ("<!--", "-->")
    } else if path.ends_with("erl") {
        ("%%", "")
    } else if path.ends_with("hrl") {
        ("%%", "")
    } else if path.ends_with("app") {
        ("%%", "")
    } else if path.ends_with("esdl") {
        ("#", "")
    } else if path.ends_with("fnl") {
        (";", "")
    } else if path.ends_with("fnlm") {
        (";", "")
    } else if path.ends_with("fga") {
        ("#", "")
    } else if path.ends_with("fidl") {
        ("//", "")
    } else if path.ends_with("fish") {
        ("#", "")
    } else if path.ends_with("fs") {
        ("\\", "")
    } else if path.ends_with("forth") {
        ("\\", "")
    } else if path.ends_with("fth") {
        ("\\", "")
    } else if path.ends_with("4th") {
        ("\\", "")
    } else if path.ends_with("f") {
        ("!", "")
    } else if path.ends_with("for") {
        ("!", "")
    } else if path.ends_with("f90") {
        ("!", "")
    } else if path.ends_with("f95") {
        ("!", "")
    } else if path.ends_with("f03") {
        ("!", "")
    } else if path.ends_with("fs") {
        ("(*", "*)")
    } else if path.ends_with("fsx") {
        ("(*", "*)")
    } else if path.ends_with("fsi") {
        ("(*", "*)")
    } else if path.ends_with("fsscript") {
        ("(*", "*)")
    } else if path.ends_with("s") {
        ("#", "")
    } else if path.ends_with("gd") {
        ("#", "")
    } else if path.ends_with("feature") {
        ("#", "")
    } else if path.ends_with("gitconfig") {
        ("#", "")
    } else if path.ends_with("gjs") {
        ("/*", "*/")
    } else if path.ends_with("gleam") {
        ("//", "")
    } else if path.ends_with("glsl") {
        ("/*", "*/")
    } else if path.ends_with("vert") {
        ("/*", "*/")
    } else if path.ends_with("tesc") {
        ("/*", "*/")
    } else if path.ends_with("tese") {
        ("/*", "*/")
    } else if path.ends_with("geom") {
        ("/*", "*/")
    } else if path.ends_with("frag") {
        ("/*", "*/")
    } else if path.ends_with("comp") {
        ("/*", "*/")
    } else if path.ends_with("gn") {
        ("#", "")
    } else if path.ends_with("gni") {
        ("#", "")
    } else if path.ends_with("go") {
        ("/*", "*/")
    } else if path.ends_with("tscn") {
        (";", "")
    } else if path.ends_with("tres") {
        (";", "")
    } else if path.ends_with("godot") {
        (";", "")
    } else if path.ends_with("gdextension") {
        (";", "")
    } else if path.ends_with("gotmpl") {
        ("/*", "*/")
    } else if path.ends_with("gpr") {
        ("--", "")
    } else if path.ends_with("gql") {
        ("\"\"\"", "\"\"\"")
    } else if path.ends_with("graphql") {
        ("\"\"\"", "\"\"\"")
    } else if path.ends_with("graphqls") {
        ("\"\"\"", "\"\"\"")
    } else if path.ends_with("gren") {
        ("{-", "-}")
    } else if path.ends_with("gradle") {
        ("//", "")
    } else if path.ends_with("groovy") {
        ("//", "")
    } else if path.ends_with("jenkinsfile") {
        ("//", "")
    } else if path.ends_with("gts") {
        ("/*", "*/")
    } else if path.ends_with("ha") {
        ("//", "")
    } else if path.ends_with("hs") {
        ("{-", "-}")
    } else if path.ends_with("hs-boot") {
        ("{-", "-}")
    } else if path.ends_with("hsc") {
        ("{-", "-}")
    } else if path.ends_with("persistentmodels") {
        ("--", "")
    } else if path.ends_with("hcl") {
        ("/*", "*/")
    } else if path.ends_with("tf") {
        ("/*", "*/")
    } else if path.ends_with("nomad") {
        ("/*", "*/")
    } else if path.ends_with("heex") {
        ("<!--", "-->")
    } else if path.ends_with("hoon") {
        ("::", "")
    } else if path.ends_with("html") {
        ("<!--", "-->")
    } else if path.ends_with("htm") {
        ("<!--", "-->")
    } else if path.ends_with("shtml") {
        ("<!--", "-->")
    } else if path.ends_with("xhtml") {
        ("<!--", "-->")
    } else if path.ends_with("xht") {
        ("<!--", "-->")
    } else if path.ends_with("jsp") {
        ("<!--", "-->")
    } else if path.ends_with("asp") {
        ("<!--", "-->")
    } else if path.ends_with("aspx") {
        ("<!--", "-->")
    } else if path.ends_with("jshtm") {
        ("<!--", "-->")
    } else if path.ends_with("volt") {
        ("<!--", "-->")
    } else if path.ends_with("rhtml") {
        ("<!--", "-->")
    } else if path.ends_with("cshtml") {
        ("<!--", "-->")
    } else if path.ends_with("hurl") {
        ("#", "")
    } else if path.ends_with("idr") {
        ("{-", "-}")
    } else if path.ends_with("iex") {
        ("#", "")
    } else if path.ends_with("ini") {
        ("#", "")
    } else if path.ends_with("service") {
        ("#", "")
    } else if path.ends_with("automount") {
        ("#", "")
    } else if path.ends_with("desktop") {
        ("#", "")
    } else if path.ends_with("device") {
        ("#", "")
    } else if path.ends_with("mount") {
        ("#", "")
    } else if path.ends_with("nspawn") {
        ("#", "")
    } else if path.ends_with("path") {
        ("#", "")
    } else if path.ends_with("scope") {
        ("#", "")
    } else if path.ends_with("slice") {
        ("#", "")
    } else if path.ends_with("socket") {
        ("#", "")
    } else if path.ends_with("swap") {
        ("#", "")
    } else if path.ends_with("target") {
        ("#", "")
    } else if path.ends_with("timer") {
        ("#", "")
    } else if path.ends_with("container") {
        ("#", "")
    } else if path.ends_with("volume") {
        ("#", "")
    } else if path.ends_with("kube") {
        ("#", "")
    } else if path.ends_with("network") {
        ("#", "")
    } else if path.ends_with("properties") {
        ("#", "")
    } else if path.ends_with("cfg") {
        ("#", "")
    } else if path.ends_with("directory") {
        ("#", "")
    } else if path.ends_with("ink") {
        ("/*", "*/")
    } else if path.ends_with("inko") {
        ("#", "")
    } else if path.ends_with("cgen") {
        ("#", "")
    } else if path.ends_with("janet") {
        ("#", "")
    } else if path.ends_with("jdn") {
        ("#", "")
    } else if path.ends_with("java") {
        ("/*", "*/")
    } else if path.ends_with("jav") {
        ("/*", "*/")
    } else if path.ends_with("pde") {
        ("/*", "*/")
    } else if path.ends_with("js") {
        ("/*", "*/")
    } else if path.ends_with("mjs") {
        ("/*", "*/")
    } else if path.ends_with("cjs") {
        ("/*", "*/")
    } else if path.ends_with("rules") {
        ("/*", "*/")
    } else if path.ends_with("es6") {
        ("/*", "*/")
    } else if path.ends_with("pac") {
        ("/*", "*/")
    } else if path.ends_with("jinja") {
        ("{#", "#}")
    } else if path.ends_with("jinja2") {
        ("{#", "#}")
    } else if path.ends_with("j2") {
        ("{#", "#}")
    } else if path.ends_with("jq") {
        ("#", "")
    } else if path.ends_with("json5") {
        ("//", "")
    } else if path.ends_with("jsonc") {
        ("/*", "*/")
    } else if path.ends_with("libsonnet") {
        ("/*", "*/")
    } else if path.ends_with("jsonnet") {
        ("/*", "*/")
    } else if path.ends_with("jsx") {
        ("/*", "*/")
    } else if path.ends_with("jl") {
        ("#=", "=#")
    } else if path.ends_with("just") {
        ("#", "")
    } else if path.ends_with("kdl") {
        ("/*", "*/")
    } else if path.ends_with("kk") {
        ("//", "")
    } else if path.ends_with("kt") {
        ("/*", "*/")
    } else if path.ends_with("kts") {
        ("/*", "*/")
    } else if path.ends_with("koto") {
        ("#-", "-#")
    } else if path.ends_with("tex") {
        ("%", "")
    } else if path.ends_with("sty") {
        ("%", "")
    } else if path.ends_with("cls") {
        ("%", "")
    } else if path.ends_with("Rd") {
        ("%", "")
    } else if path.ends_with("bbx") {
        ("%", "")
    } else if path.ends_with("cbx") {
        ("%", "")
    } else if path.ends_with("ld") {
        ("/*", "*/")
    } else if path.ends_with("ldif") {
        ("#", "")
    } else if path.ends_with("lean") {
        ("/-", "-/")
    } else if path.ends_with("ldg") {
        (";", "")
    } else if path.ends_with("ledger") {
        (";", "")
    } else if path.ends_with("journal") {
        (";", "")
    } else if path.ends_with("ll") {
        (";", "")
    } else if path.ends_with("mir") {
        ("#", "")
    } else if path.ends_with("lpf") {
        ("#", "")
    } else if path.ends_with("lua") {
        ("--[[", "--]]")
    } else if path.ends_with("rockspec") {
        ("--[[", "--]]")
    } else if path.ends_with("luau") {
        ("--[[", "]]")
    } else if path.ends_with("make") {
        ("#", "")
    } else if path.ends_with("mk") {
        ("#", "")
    } else if path.ends_with("mak") {
        ("#", "")
    } else if path.ends_with("mdoc") {
        ("<!--", "-->")
    } else if path.ends_with("md") {
        ("<!--", "-->")
    } else if path.ends_with("livemd") {
        ("<!--", "-->")
    } else if path.ends_with("markdown") {
        ("<!--", "-->")
    } else if path.ends_with("mdx") {
        ("<!--", "-->")
    } else if path.ends_with("mkd") {
        ("<!--", "-->")
    } else if path.ends_with("mkdn") {
        ("<!--", "-->")
    } else if path.ends_with("mdwn") {
        ("<!--", "-->")
    } else if path.ends_with("mdown") {
        ("<!--", "-->")
    } else if path.ends_with("markdn") {
        ("<!--", "-->")
    } else if path.ends_with("mdtxt") {
        ("<!--", "-->")
    } else if path.ends_with("mdtext") {
        ("<!--", "-->")
    } else if path.ends_with("workbook") {
        ("<!--", "-->")
    } else if path.ends_with("m") {
        ("%", "")
    } else if path.ends_with("mermaid") {
        ("%%", "")
    } else if path.ends_with("mmd") {
        ("%%", "")
    } else if path.ends_with("mint") {
        ("/*", "*/")
    } else if path.ends_with("mojo") {
        ("#", "")
    } else if path.ends_with("🔥") {
        ("#", "")
    } else if path.ends_with("move") {
        ("//", "")
    } else if path.ends_with("proj") {
        ("<!--", "-->")
    } else if path.ends_with("vbproj") {
        ("<!--", "-->")
    } else if path.ends_with("csproj") {
        ("<!--", "-->")
    } else if path.ends_with("fsproj") {
        ("<!--", "-->")
    } else if path.ends_with("targets") {
        ("<!--", "-->")
    } else if path.ends_with("props") {
        ("<!--", "-->")
    } else if path.ends_with("asm") {
        (";", "")
    } else if path.ends_with("S") {
        (";", "")
    } else if path.ends_with("nasm") {
        (";", "")
    } else if path.ends_with("nt") {
        ("#", "")
    } else if path.ends_with("ncl") {
        ("#", "")
    } else if path.ends_with("nim") {
        ("#[", "]#")
    } else if path.ends_with("nims") {
        ("#[", "]#")
    } else if path.ends_with("nimble") {
        ("#[", "]#")
    } else if path.ends_with("nix") {
        ("#", "")
    } else if path.ends_with("nu") {
        ("#", "")
    } else if path.ends_with("nuon") {
        ("#", "")
    } else if path.ends_with("njk") {
        ("{#", "#}")
    } else if path.ends_with("ml") {
        ("(*", "*)")
    } else if path.ends_with("mli") {
        ("(*", "*)")
    } else if path.ends_with("odin") {
        ("/*", "*/")
    } else if path.ends_with("ohm") {
        ("/*", "*/")
    } else if path.ends_with("cl") {
        ("//", "")
    } else if path.ends_with("scad") {
        ("/*", "*/")
    } else if path.ends_with("pas") {
        ("{", "}")
    } else if path.ends_with("pp") {
        ("{", "}")
    } else if path.ends_with("inc") {
        ("{", "}")
    } else if path.ends_with("lpr") {
        ("{", "}")
    } else if path.ends_with("lfm") {
        ("{", "}")
    } else if path.ends_with("pl") {
        ("#", "")
    } else if path.ends_with("pm") {
        ("#", "")
    } else if path.ends_with("t") {
        ("#", "")
    } else if path.ends_with("psgi") {
        ("#", "")
    } else if path.ends_with("raku") {
        ("#", "")
    } else if path.ends_with("rakumod") {
        ("#", "")
    } else if path.ends_with("rakutest") {
        ("#", "")
    } else if path.ends_with("rakudoc") {
        ("#", "")
    } else if path.ends_with("nqp") {
        ("#", "")
    } else if path.ends_with("p6") {
        ("#", "")
    } else if path.ends_with("pl6") {
        ("#", "")
    } else if path.ends_with("pm6") {
        ("#", "")
    } else if path.ends_with("pest") {
        ("/*", "*/")
    } else if path.ends_with("php") {
        ("/**", "*/")
    } else if path.ends_with("inc") {
        ("/**", "*/")
    } else if path.ends_with("php4") {
        ("/**", "*/")
    } else if path.ends_with("php5") {
        ("/**", "*/")
    } else if path.ends_with("phtml") {
        ("/**", "*/")
    } else if path.ends_with("ctp") {
        ("/**", "*/")
    } else if path.ends_with("pkl") {
        ("//", "")
    } else if path.ends_with("pcf") {
        ("//", "")
    } else if path.ends_with("po") {
        ("#", "")
    } else if path.ends_with("pot") {
        ("#", "")
    } else if path.ends_with("pony") {
        ("/*", "*/")
    } else if path.ends_with("ps1") {
        ("<#", "#>")
    } else if path.ends_with("psm1") {
        ("<#", "#>")
    } else if path.ends_with("psd1") {
        ("<#", "#>")
    } else if path.ends_with("pscc") {
        ("<#", "#>")
    } else if path.ends_with("psrc") {
        ("<#", "#>")
    } else if path.ends_with("prisma") {
        ("//", "")
    } else if path.ends_with("pl") {
        ("/*", "*/")
    } else if path.ends_with("prolog") {
        ("/*", "*/")
    } else if path.ends_with("properties") {
        ("#", "")
    } else if path.ends_with("prefs") {
        ("#", "")
    } else if path.ends_with("proto") {
        ("/*", "*/")
    } else if path.ends_with("prql") {
        ("#", "")
    } else if path.ends_with("pug") {
        ("//", "")
    } else if path.ends_with("purs") {
        ("{-", "-}")
    } else if path.ends_with("py") {
        ("#", "")
    } else if path.ends_with("pyi") {
        ("#", "")
    } else if path.ends_with("py3") {
        ("#", "")
    } else if path.ends_with("pyw") {
        ("#", "")
    } else if path.ends_with("ptl") {
        ("#", "")
    } else if path.ends_with("rpy") {
        ("#", "")
    } else if path.ends_with("cpy") {
        ("#", "")
    } else if path.ends_with("ipy") {
        ("#", "")
    } else if path.ends_with("pyt") {
        ("#", "")
    } else if path.ends_with("qml") {
        ("/*", "*/")
    } else if path.ends_with("qmd") {
        ("<!--", "-->")
    } else if path.ends_with("qnt") {
        ("/*", "*/")
    } else if path.ends_with("r") {
        ("#", "")
    } else if path.ends_with("R") {
        ("#", "")
    } else if path.ends_with("rkt") {
        ("#|", "|#")
    } else if path.ends_with("rktd") {
        ("#|", "|#")
    } else if path.ends_with("rktl") {
        ("#|", "|#")
    } else if path.ends_with("scrbl") {
        ("#|", "|#")
    } else if path.ends_with("rego") {
        ("#", "")
    } else if path.ends_with("res") {
        ("/*", "*/")
    } else if path.ends_with("rmd") {
        ("<!--", "-->")
    } else if path.ends_with("Rmd") {
        ("<!--", "-->")
    } else if path.ends_with("robot") {
        ("#", "")
    } else if path.ends_with("resource") {
        ("#", "")
    } else if path.ends_with("ron") {
        ("/*", "*/")
    } else if path.ends_with("rst") {
        ("..", "")
    } else if path.ends_with("rb") {
        ("#", "")
    } else if path.ends_with("rake") {
        ("#", "")
    } else if path.ends_with("irb") {
        ("#", "")
    } else if path.ends_with("gemspec") {
        ("#", "")
    } else if path.ends_with("rabl") {
        ("#", "")
    } else if path.ends_with("jbuilder") {
        ("#", "")
    } else if path.ends_with("jb") {
        ("#", "")
    } else if path.ends_with("podspec") {
        ("#", "")
    } else if path.ends_with("rjs") {
        ("#", "")
    } else if path.ends_with("rbi") {
        ("#", "")
    } else if path.ends_with("rbs") {
        ("#", "")
    } else if path.ends_with("rs") {
        ("/*", "*/")
    } else if path.ends_with("sage") {
        ("#", "")
    } else if path.ends_with("scala") {
        ("/*", "*/")
    } else if path.ends_with("sbt") {
        ("/*", "*/")
    } else if path.ends_with("sc") {
        ("/*", "*/")
    } else if path.ends_with("ss") {
        (";", "")
    } else if path.ends_with("scm") {
        (";", "")
    } else if path.ends_with("sld") {
        (";", "")
    } else if path.ends_with("scss") {
        ("/*", "*/")
    } else if path.ends_with("slang") {
        ("/*", "*/")
    } else if path.ends_with("slint") {
        ("/*", "*/")
    } else if path.ends_with("smali") {
        ("#", "")
    } else if path.ends_with("smithy") {
        ("//", "")
    } else if path.ends_with("sml") {
        ("(*", "*)")
    } else if path.ends_with("smk") {
        ("#", "")
    } else if path.ends_with("sol") {
        ("/*", "*/")
    } else if path.ends_with("sp") {
        ("//", "")
    } else if path.ends_with("inc") {
        ("//", "")
    } else if path.ends_with("spade") {
        ("/*", "*/")
    } else if path.ends_with("zed") {
        ("//", "")
    } else if path.ends_with("sql") {
        ("/*", "*/")
    } else if path.ends_with("dsql") {
        ("/*", "*/")
    } else if path.ends_with("bzl") {
        ("#", "")
    } else if path.ends_with("bazel") {
        ("#", "")
    } else if path.ends_with("star") {
        ("#", "")
    } else if path.ends_with("scd") {
        ("//", "")
    } else if path.ends_with("sc") {
        ("//", "")
    } else if path.ends_with("quark") {
        ("//", "")
    } else if path.ends_with("svelte") {
        ("/*", "*/")
    } else if path.ends_with("sw") {
        ("//", "")
    } else if path.ends_with("swift") {
        ("/*", "*/")
    } else if path.ends_with("swiftinterface") {
        ("/*", "*/")
    } else if path.ends_with("cmm") {
        (";", "")
    } else if path.ends_with("t32") {
        (";", "")
    } else if path.ends_with("td") {
        ("/*", "*/")
    } else if path.ends_with("tact") {
        ("//", "")
    } else if path.ends_with("task") {
        ("#", "")
    } else if path.ends_with("tcl") {
        ("#", "")
    } else if path.ends_with("tl") {
        ("--[[", "--]]")
    } else if path.ends_with("templ") {
        ("//", "")
    } else if path.ends_with("tera") {
        ("{#", "#}")
    } else if path.ends_with("txtpb") {
        ("#", "")
    } else if path.ends_with("textpb") {
        ("#", "")
    } else if path.ends_with("textproto") {
        ("#", "")
    } else if path.ends_with("tfvars") {
        ("/*", "*/")
    } else if path.ends_with("thrift") {
        ("/*", "*/")
    } else if path.ends_with("tla") {
        ("(*", "*)")
    } else if path.ends_with("toml") {
        ("#", "")
    } else if path.ends_with("tsx") {
        ("/*", "*/")
    } else if path.ends_with("twig") {
        ("{#", "#}")
    } else if path.ends_with("ts") {
        ("/*", "*/")
    } else if path.ends_with("mts") {
        ("/*", "*/")
    } else if path.ends_with("cts") {
        ("/*", "*/")
    } else if path.ends_with("tsp") {
        ("/*", "*/")
    } else if path.ends_with("typst") {
        ("/*", "*/")
    } else if path.ends_with("typ") {
        ("/*", "*/")
    } else if path.ends_with("ungram") {
        ("//", "")
    } else if path.ends_with("ungrammar") {
        ("//", "")
    } else if path.ends_with("u") {
        ("--", "")
    } else if path.ends_with("tal") {
        ("(", ")")
    } else if path.ends_with("v") {
        ("/*", "*/")
    } else if path.ends_with("vv") {
        ("/*", "*/")
    } else if path.ends_with("vsh") {
        ("/*", "*/")
    } else if path.ends_with("vala") {
        ("/*", "*/")
    } else if path.ends_with("vapi") {
        ("/*", "*/")
    } else if path.ends_with("vto") {
        ("{{#", "#}}")
    } else if path.ends_with("v") {
        ("/*", "*/")
    } else if path.ends_with("vh") {
        ("/*", "*/")
    } else if path.ends_with("sv") {
        ("/*", "*/")
    } else if path.ends_with("svh") {
        ("/*", "*/")
    } else if path.ends_with("vhd") {
        ("--", "")
    } else if path.ends_with("vhdl") {
        ("--", "")
    } else if path.ends_with("tape") {
        ("#", "")
    } else if path.ends_with("vue") {
        ("<!--", "-->")
    } else if path.ends_with("wast") {
        ("(;", ";)")
    } else if path.ends_with("wat") {
        ("(;", ";)")
    } else if path.ends_with("webc") {
        ("<!--", "-->")
    } else if path.ends_with("werk") {
        ("#", "")
    } else if path.ends_with("wesl") {
        ("/*", "*/")
    } else if path.ends_with("wgsl") {
        ("/*", "*/")
    } else if path.ends_with("wit") {
        ("/*", "*/")
    } else if path.ends_with("xml") {
        ("<!--", "-->")
    } else if path.ends_with("mobileconfig") {
        ("<!--", "-->")
    } else if path.ends_with("plist") {
        ("<!--", "-->")
    } else if path.ends_with("xib") {
        ("<!--", "-->")
    } else if path.ends_with("storyboard") {
        ("<!--", "-->")
    } else if path.ends_with("svg") {
        ("<!--", "-->")
    } else if path.ends_with("xsd") {
        ("<!--", "-->")
    } else if path.ends_with("gml") {
        ("<!--", "-->")
    } else if path.ends_with("xaml") {
        ("<!--", "-->")
    } else if path.ends_with("gir") {
        ("<!--", "-->")
    } else if path.ends_with("rss") {
        ("<!--", "-->")
    } else if path.ends_with("atom") {
        ("<!--", "-->")
    } else if path.ends_with("opml") {
        ("<!--", "-->")
    } else if path.ends_with("policy") {
        ("<!--", "-->")
    } else if path.ends_with("ascx") {
        ("<!--", "-->")
    } else if path.ends_with("axml") {
        ("<!--", "-->")
    } else if path.ends_with("axaml") {
        ("<!--", "-->")
    } else if path.ends_with("bpmn") {
        ("<!--", "-->")
    } else if path.ends_with("cpt") {
        ("<!--", "-->")
    } else if path.ends_with("csl") {
        ("<!--", "-->")
    } else if path.ends_with("csproj.user") {
        ("<!--", "-->")
    } else if path.ends_with("dita") {
        ("<!--", "-->")
    } else if path.ends_with("ditamap") {
        ("<!--", "-->")
    } else if path.ends_with("dtml") {
        ("<!--", "-->")
    } else if path.ends_with("fxml") {
        ("<!--", "-->")
    } else if path.ends_with("iml") {
        ("<!--", "-->")
    } else if path.ends_with("isml") {
        ("<!--", "-->")
    } else if path.ends_with("jmx") {
        ("<!--", "-->")
    } else if path.ends_with("launch") {
        ("<!--", "-->")
    } else if path.ends_with("menu") {
        ("<!--", "-->")
    } else if path.ends_with("mxml") {
        ("<!--", "-->")
    } else if path.ends_with("nuspec") {
        ("<!--", "-->")
    } else if path.ends_with("osc") {
        ("<!--", "-->")
    } else if path.ends_with("osm") {
        ("<!--", "-->")
    } else if path.ends_with("pt") {
        ("<!--", "-->")
    } else if path.ends_with("publishsettings") {
        ("<!--", "-->")
    } else if path.ends_with("pubxml") {
        ("<!--", "-->")
    } else if path.ends_with("pubxml.user") {
        ("<!--", "-->")
    } else if path.ends_with("rbxlx") {
        ("<!--", "-->")
    } else if path.ends_with("rbxmx") {
        ("<!--", "-->")
    } else if path.ends_with("rng") {
        ("<!--", "-->")
    } else if path.ends_with("shproj") {
        ("<!--", "-->")
    } else if path.ends_with("tld") {
        ("<!--", "-->")
    } else if path.ends_with("tmx") {
        ("<!--", "-->")
    } else if path.ends_with("vbproj.user") {
        ("<!--", "-->")
    } else if path.ends_with("vcxproj") {
        ("<!--", "-->")
    } else if path.ends_with("vcxproj.filters") {
        ("<!--", "-->")
    } else if path.ends_with("wsdl") {
        ("<!--", "-->")
    } else if path.ends_with("wxi") {
        ("<!--", "-->")
    } else if path.ends_with("wxs") {
        ("<!--", "-->")
    } else if path.ends_with("xbl") {
        ("<!--", "-->")
    } else if path.ends_with("xlf") {
        ("<!--", "-->")
    } else if path.ends_with("xliff") {
        ("<!--", "-->")
    } else if path.ends_with("xpdl") {
        ("<!--", "-->")
    } else if path.ends_with("xul") {
        ("<!--", "-->")
    } else if path.ends_with("xoml") {
        ("<!--", "-->")
    } else if path.ends_with("musicxml") {
        ("<!--", "-->")
    } else if path.ends_with("glif") {
        ("<!--", "-->")
    } else if path.ends_with("ui") {
        ("<!--", "-->")
    } else if path.ends_with("sublime-snippet") {
        ("<!--", "-->")
    } else if path.ends_with("xsl") {
        ("<!--", "-->")
    } else if path.ends_with("mpd") {
        ("<!--", "-->")
    } else if path.ends_with("smil") {
        ("<!--", "-->")
    } else if path.ends_with("xtc") {
        (";", "")
    } else if path.ends_with("xpc") {
        (";", "")
    } else if path.ends_with("xoa") {
        (";", "")
    } else if path.ends_with("yml") {
        ("#", "")
    } else if path.ends_with("yaml") {
        ("#", "")
    } else if path.ends_with("sublime-syntax") {
        ("#", "")
    } else if path.ends_with("yara") {
        ("/*", "*/")
    } else if path.ends_with("yar") {
        ("/*", "*/")
    } else if path.ends_with("yuck") {
        (";", "")
    } else if path.ends_with("zig") {
        ("//", "")
    } else if path.ends_with("zon") {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/i3/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sway/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/tmux.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_login")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_logout")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bashrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zshenv")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zlogin")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zlogout")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zshrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.zimrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/APKBUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.bash_aliases")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Renviron")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xsession")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.xsessionrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.yashrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.yash_profile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.hushlogin")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf/*/*.{inc,conf}")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/recipe-*/*/*.inc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Caddyfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/CMakeLists.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#[[", "]]")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.hpp.in")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.h.in")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/suite.rc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/debian/**/control")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/etc/apt/sources.list.d/*.sources")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/docker-compose.yaml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/docker-compose.yml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Dockerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Dockerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dockerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dockerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Containerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Containerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/containerfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/containerfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dune-project")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dune")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/dunst/dunstrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Earthfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/mix.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.env")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.env.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.envrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.envrc.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rebar.config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rebar.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.app.src")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("%%", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/ghostty/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitattributes")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/git/attributes")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/COMMIT_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/MERGE_MSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitmodules")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitconfig")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.git/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/git/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gitignore_global")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/git/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/CODEOWNERS")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.config/helix/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.helix/ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.*ignore")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.git-blame-ignore-revs")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/NOTES_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/git-rebase-todo")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/{app,addon}/{components,templates}/*.hbs")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("{{!", "}}")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/go.mod")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/go.work")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Jenkinsfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Jenkinsfile.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("//", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/*.yaml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/*.yml")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/_*.tpl")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/templates/NOTES.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/**/src/*/resources/**/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*scalafmt*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*scalafix*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hosts")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hypr/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/mimeapps.list")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/systemd/**/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.editorconfig")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.npmrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/hgrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/npmrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rclone.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.node_repl_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/jakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.jjdescription")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("JJ:", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/{t,j}sconfig.json")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/bun.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("/*", "*/")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Justfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Makefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/makefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/GNUmakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/OCamlMakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/PULLREQ_EDITMSG")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("<!--", "-->")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson.build")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson.options")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/meson_options.txt")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sites-available/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/sites-enabled/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/nginx.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/conf.d/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/PKGBUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.python_history")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.pythonstartup")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.pythonrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*SConstruct")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*SConscript")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*sconstruct")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.Rprofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rprofile.site")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.RHistory")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/rakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/gemfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Gemfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Podfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Vagrantfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Brewfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Guardfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Capfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Cheffile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Hobofile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Appraisals")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Rantfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Berksfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Berksfile.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Thorfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Puppetfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Fastfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Appfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Deliverfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Matchfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Scanfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Snapfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Gymfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Snakefile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.ssh/config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("/etc/ssh/ssh_config")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/ssh_config.d/*.conf")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUILD")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUCK")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/BUILD.*")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Tiltfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/WORKSPACE")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/WORKSPACE.bzlmod")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/pdm.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/poetry.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Cargo.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/uv.lock")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/queries/*.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/injections.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/highlights.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/indents.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/textobjects.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/locals.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/tags.scm")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        (";", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/Werkfile")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/*.tm[Tt]heme")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("<!--", "-->")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.prettierrc")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clangd")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clang-format")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.clang-tidy")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else if {
        #[cfg(feature = "glob")]
        let glob = globset::Glob::new("*/.gem/credentials")
            .expect(
                concat!(
                    "deserialization would fail in the ",
                    "build script if this glob was invalid"
                ),
            )
            .compile_matcher()
            .is_match(path);
        #[cfg(not(feature = "glob"))]
        let glob = false;
        glob
    } {
        ("#", "")
    } else {
        ("#", "")
    };
    let content = content.to_string();
    let mut buf = String::with_capacity(
        start_token.len() + content.len() + end_token.len(),
    );
    buf.push_str(start_token);
    buf.push_str(&content);
    buf.push_str(end_token);
    buf
}
